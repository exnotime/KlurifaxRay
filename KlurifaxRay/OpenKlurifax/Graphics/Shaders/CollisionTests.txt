
	
void RaySphear(in Ray r,in Sphere s ,out HitData hd){
	hd.Hit = false;
	hd.Depth = MaxDistance;
	vec3 l = s.c - r.o.xyz;
	float S = dot(l, r.d.xyz);
	if(S < 0.0 && dot(l,l) > s.r * s.r)
		return;
	float msqr = (dot(l,l) - (S * S));
	if(msqr > s.r * s.r)
		return;
	float q = sqrt((s.r * s.r) - msqr);
	float t = 0.0f;
	if(dot(l,l) > s.r * s.r)
		t = S - q;
	else
		t = S + q;

	hd.Color = s.Color;
	hd.Depth = t;
	hd.Hit = true;
	hd.Normal = normalize((r.o.xyz + (t * r.d.xyz)) - s.c);
}

void RayTriangle(in Ray ray, in Triangle tri , out vec2 uv, out HitData hd){
	hd.Hit = false;
	hd.Depth = MaxDistance;
	vec3 e1 = tri.p1.xyz - tri.p0.xyz;
	vec3 e2 = tri.p2.xyz - tri.p0.xyz;
	vec3 q = cross(ray.d.xyz,e2);
	float a = dot(q,e1);
	if(a > -EPS && a < EPS)return;
	float f = 1 / a;
	vec3 s = ray.o.xyz - tri.p0.xyz;
	float u = f * dot(s,q);
	if( u < 0) return;
	vec3 r = cross(s ,e1);
	float v = f * dot(ray.d.xyz ,r);
	if(v < 0 || u + v > 1) return;
	float t = f * dot(e2,r);
	if(t < 0) return;

	uv = vec2(u,v);
	hd.Color = tri.Color;
	hd.Depth = t;
	hd.Hit = true;
	hd.Normal = normalize(cross(e2,e1));
}


void RayAABB(in Ray r, in AABB box, out HitData hd){
	hd.Hit = false;
	hd.Depth = MaxDistance;
	vec4 invDir = 1.0f / r.d;
	float t1 = (box.Bounds[0].x - r.o.x) * invDir.x;
	float t2 = (box.Bounds[1].x - r.o.x) * invDir.x;
	float t3 = (box.Bounds[0].y - r.o.y) * invDir.y;
	float t4 = (box.Bounds[1].y - r.o.y) * invDir.y;
	float t5 = (box.Bounds[0].z - r.o.z) * invDir.z;
	float t6 = (box.Bounds[1].z - r.o.z) * invDir.z;
	float tmin = max(max(min(t1, t2), min(t3, t4)), min(t5, t6));
    float tmax = min(min(max(t1, t2), max(t3, t4)), max(t5, t6));
	if(tmax < 0 || tmin > tmax){
		return; //no hit
	}
	hd.Color = box.Color;
	hd.Depth = tmax;
	hd.Hit = true;
}

void RayVertexTri(in Ray ray, in Vertex v0, in Vertex v1, in Vertex v2, out HitData hd){
	hd.Hit = false;
	hd.Depth = MaxDistance;
	vec3 e1 = v1.Position.xyz 	- v0.Position.xyz;
	vec3 e2 = v2.Position.xyz 		- v0.Position.xyz;
	vec3 q = cross(ray.d.xyz,e2);
	float a = dot(q,e1);
	if(a > -EPS && a < EPS) return;
	float f = 1 / a;
	vec3 s = ray.o.xyz - v0.Position.xyz;
	float u = f * dot(s,q);
	if( u < 0) return;
	vec3 r = cross(s ,e1);
	float v = f * dot(ray.d.xyz ,r);
	if(v < 0 || u + v > 1) return;
	float t = f * dot(e2,r);
	if(t < 0) return;

	hd.Color = vec4(1,0,1,1);
	hd.Depth = t;
	hd.Hit = true;
	hd.uv = (1.0f - u - v) * v0.TexCoord.xy + u * v1.TexCoord.xy + v * v2.TexCoord.xy;
	hd.Normal = (1.0f - u - v) * v0.Normal.xyz + u * v1.Normal.xyz + v * v2.Normal.xyz;
	hd.Tangent = (1.0f - u - v) * v0.Tangent.xyz + u * v1.Tangent.xyz + v * v2.Tangent.xyz;
}

vec3 CalcBumpedNormal(in vec3 InNormal, in vec3 InTangent, in vec2 uv, in sampler2D tex){
	vec3 normal = normalize(InNormal);
	vec3 tangent = normalize(InTangent);
	tangent = normalize(tangent - dot(tangent,normal) * normal);
	vec3 bitangent = cross(normal, tangent);

	vec3 bump = texture(tex,uv).xyz;
	bump = (bump * 2.0) - 1.0;

	vec3 newNormal;
	mat3 TBN = mat3(tangent,bitangent,normal);
	newNormal = TBN * bump;
	return normalize(newNormal);
}

vec4 ChangeBrightness(in vec4 rgbColor,in float brightnessAdjust){
	double y = 0.299 * rgbColor.r + 0.587 * rgbColor.g + 0.114 * rgbColor.b;
	double cb = -0.169 * rgbColor.r + -0.331 * rgbColor.g + 0.5 * rgbColor.b + 0.5;
	double cr = 0.5 * rgbColor.r + -0.419 * rgbColor.g + -0.081 * rgbColor.b + 0.5;

	y *= brightnessAdjust;

	double r = y + 1.4 * (cr - 0.5);
	double g = y + -0.344 * (cb - 0.5) + -0.714 * (cr - 0.5);  
	double b = y + 1.772 * (cb - 0.5);
	return vec4(r,g,b,1);
}